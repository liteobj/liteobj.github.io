<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | HiPerC]]></title>
  <link href="http://hiperc.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://hiperc.com/"/>
  <updated>2013-10-20T20:52:56+08:00</updated>
  <id>http://hiperc.com/</id>
  <author>
    <name><![CDATA[HiperC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++ Variables and its Lifetime]]></title>
    <link href="http://hiperc.com/c-plus-plus-variables-and-its-lifetime/"/>
    <updated>2013-10-20T11:19:00+08:00</updated>
    <id>http://hiperc.com/c-plus-plus-variables-and-its-lifetime</id>
    <content type="html"><![CDATA[<h3>Global variables</h3>

<p>Global variables are defined outside all function bodies and are available to all parts of the program (even code in other files).</p>

<h3>Local variables</h3>

<p>Local Variables occur within a scope; they are “local” to a function. They are often called automatic variables because they automatically come into being when the scope is entered and automatically go away when the scope closes.
The <strong>register</strong> keyword tells the compiler &ldquo;Make accesses to this variable as fast as possible.&rdquo; It is often done by placing the variable in a register. There is no guarantee that the variable will be placed in a register or even that the access speed will increase. It is a hint to the compiler.</p>

<!-- more -->


<h3>Static</h3>

<p>Incase of static variables the initialisation is performed only the first time the function is called, and the data retains its value between function calls. You may wonder why a global variable isn’t used instead. The beauty of a <strong>static</strong> variable is that it is unavailable outside the scope of the function, so it can’t be inadvertently changed.
``` c++ Each time func( ) is called in the for loop, it prints a different value.</p>

<h1>include <iostream>using namespace std;void func() {  static int i = 0;  cout &lt;&lt; &ldquo;i = &rdquo; &lt;&lt; ++i &lt;&lt; endl;}int main() {  for(int x = 0; x &lt; 10; x++)    func();}</h1>

<p>```
When static is applied to a function name or to a variable that is outside of all functions, it means “This name is unavailable outside of this file.” The function name or variable is local to the file; we say it has <strong>file scope</strong>.</p>

<h3>Extern</h3>

<p>It tells the compiler that a variable or a function exists, even if the compiler hasn’t yet seen it in the file currently being compiled. This variable or function may be defined in another file or further down in the current file. <strong>extern won&rsquo;t work</strong> if the variable it is trying to access is declared as static.</p>

<h3>Constant</h3>

<p>Any type, built-in or user-defined, may be defined as const. If you define something as const and then attempt to modify it, the compiler will generate an error.</p>

<h3>Volatile</h3>

<p>Whereas the qualifier const tells the compiler “This never changes” (which allows the compiler to perform extra optimisations), the qualifier volatile tells the compiler “You never know when this will change,” and prevents the compiler from performing any optimisations based on the stability of that variable.</p>

<p>volatile variable is always read whenever its value is required, even if it was just read the line before.A special case of some storage being “outside the control of your code” is in a multithreaded program. If you’re watching a particular flag that is modified by another thread or process, that flag should be volatile so the compiler doesn’t make the assumption that it can optimise away multiple reads of the flag.</p>

<p>Linkage describes this storage as it is seen by the linker. <strong>Internal linkage</strong> means that storage is created to represent the identifier only for the file being compiled. <strong>External linkage</strong> means that a single piece of storage is created to represent the identifier for all files being compiled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PROCESSES THREADS AND PTHREADS]]></title>
    <link href="http://hiperc.com/processes-threads-and-pthreads/"/>
    <updated>2013-10-10T23:49:00+08:00</updated>
    <id>http://hiperc.com/processes-threads-and-pthreads</id>
    <content type="html"><![CDATA[<p>Coming Soon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Handling]]></title>
    <link href="http://hiperc.com/exception-handling/"/>
    <updated>2013-09-29T02:31:00+08:00</updated>
    <id>http://hiperc.com/exception-handling</id>
    <content type="html"><![CDATA[<p><strong>Throw</strong> first it creates an object that isn’t there under normal program execution, and of course the constructor is called for that object. Then the object is, in effect, “returned” from the function, even though that object type isn’t normally what the function is designed to return. A simplistic way to think about exception handling is as an alternate return mechanism, although you get into trouble if you take the analogy too far – you can also exit from ordinary scopes by throwing an exception.</p>

<!-- more -->


<p>The function <strong>unexpected( )</strong> is called when you throw something other than what appears in the exception specification. <strong>set_unexpected( )</strong> is implemented with a pointer to a function, so you can change its behaviour.</p>

<p>If an exception is uncaught, the special function <strong>terminate( )</strong> is automatically called. You can install your own terminate( ) function using the standard <strong>set_terminate( )</strong> function, which returns a pointer to the terminate( ) function you are replacing, so you can restore it later if you want.</p>

<ul>
<li>exception: The base class for all the exceptions thrown by the  ++ standard library. You can ask what( ) and get a result that can be displayed as a character representation.</li>
<li>logic_error: Derived from exception. Reports program logic errors, which could presumably be detected before the program executes.</li>
<li>runtime_error: Derived from exception. Reports runtime errors, which can presumably be detected only when the program executes.</li>
</ul>


<h3>logic_error</h3>

<ul>
<li>domain_error: Reports violations of a precondition.</li>
<li>invalid_argument Indicates an invalid argument to the function it’s thrown from.</li>
<li>length_error: Indicates an attempt to produce an object whose length is greater than or equal to NPOS (the largest representable value of type size_t)</li>
<li>out_of_range: Reports an out-of-range argument.</li>
<li>bad_cast: Thrown for executing an invalid dynamic_cast expression in run-time type identification.</li>
<li>bad_typeid: Reports a null pointer p in an expression typeid(*p). (Again, a run-time type).</li>
</ul>


<h3>runtime_error</h3>

<ul>
<li>range_error: Reports violation of a postcondition.</li>
<li>overflow_error: Reports an arithmetic overflow.</li>
<li>bad_alloc: Reports a failure to allocate storage.</li>
</ul>


<h3>Catch by reference not by value</h3>

<p><script src='https://gist.github.com/6745383.js?file='></script><noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://gist.github.com/liteobj/6745383/raw/&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></p>

<p><code>
https://gist.github.com/6745383.git
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Casting in C++]]></title>
    <link href="http://hiperc.com/casting-in-c-plus-plus/"/>
    <updated>2013-09-28T23:44:00+08:00</updated>
    <id>http://hiperc.com/casting-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Generally creating a specific object (Circle, Square, or Triangle), take its address and cast it to a Shape* (forgetting the specific type of the object), and use that anonymous
pointer in the rest of the program. Act of casting from a more derived type to a base type is called <strong>upcasting</strong>.</p>

<!-- more -->


<ul>
<li><p><strong>static_cast</strong>: For “well-behaved” and “reasonably well behaved”casts, including things you might now do without a cast (e.g., an upcast or automatic type conversion).</p></li>
<li><p><strong>const_cast</strong>: To cast away const and/or volatile.</p></li>
<li><p><strong>dynamic_cast</strong>: For type-safe <strong>downcasting</strong>. If casting a Circle<em> to a Shape</em> is an upcast, then casting a Shape<em> to a Circle</em> is a downcast. However, you know a Circle<em> is also a Shape</em>,and the compiler freely allows an upcast assignment, but you don’t know that a Shape<em> is necessarily a Circle</em>, so the compiler doesn’t allow you to perform a downcast assignment without using an explicit cast.</p></li>
<li><p><strong>reinterpret_cast</strong> To cast to a completely different meaning. The key is that you’ll need to cast back to the original type to use it safely. The type you cast to is typically used only for bit twiddling or some other mysterious purpose. This is the most dangerous of all the casts.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Classes]]></title>
    <link href="http://hiperc.com/c-plus-plus-classes/"/>
    <updated>2013-09-13T07:17:00+08:00</updated>
    <id>http://hiperc.com/c-plus-plus-classes</id>
    <content type="html"><![CDATA[<p>Structure defaults to public while class defaults to private. Union can not be a base class as memory of the member variables are overlayed.</p>

<p>Upcasting is a way of taking an address of the object and treating it as the base class.</p>

<!-- more -->


<p>VTable holds the list of virtual functions. The size of the class A with one or more virtual function is equal to size(A) + size of void pointer. VPTR is created during the initialisation of the class hence default constructor comes into act.
typeid is used for down casting, by overcoming the behaviour of dynamic casting.</p>
]]></content>
  </entry>
  
</feed>
