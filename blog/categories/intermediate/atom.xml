<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Intermediate | HiPerC]]></title>
  <link href="http://hiperc.com/blog/categories/intermediate/atom.xml" rel="self"/>
  <link href="http://hiperc.com/"/>
  <updated>2013-10-28T23:07:50+08:00</updated>
  <id>http://hiperc.com/</id>
  <author>
    <name><![CDATA[HiperC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++ Memory Management]]></title>
    <link href="http://hiperc.com/c-plus-plus-memory-management/"/>
    <updated>2013-10-27T14:19:00+08:00</updated>
    <id>http://hiperc.com/c-plus-plus-memory-management</id>
    <content type="html"><![CDATA[<p>C++ has several distinct memory areas where objects and non-object values may be stored, and each area has different characteristics.</p>

<h3>Const Data</h3>

<p>The const data area stores string literals and other data whose values are known at compile time.  No objects of class type can exist in this area. All data in this area is available during the entire lifetime of the program. Further, all of this data is read-only, and the results of trying to modify it are undefined. This is in part because even the underlying storage format is subject to arbitrary optimization by the implementation.  For example, a particular compiler may store string literals in overlapping objects if it wants to.</p>

<h3>Stack</h3>

<p>The stack stores automatic variables. Typically allocation is much faster than for dynamic storage (heap or free store) because a memory allocation involves only pointer increment rather than more complex management. Objects are constructed immediately after memory is allocated and destroyed immediately before memory is deallocated, so there is no opportunity for programmers to directly manipulate allocated but uninitialized stack space (barring willful tampering using explicit dtors and placement new).</p>

<h3>Free Store</h3>

<p>The free store is one of the two dynamic memory areas, allocated/freed by new/delete.  Object lifetime can be less than the time the storage is allocated; that is, free store objects can have memory allocated without being immediately initialized, and can be destroyed without the memory being immediately deallocated.  During the period when the storage is allocated but outside the object&rsquo;s lifetime, the storage may be accessed and manipulated through a void* but none of the proto-object&rsquo;s nonstatic members or member functions may be accessed, have their addresses taken, or be otherwise manipulated.</p>

<h3>Heap</h3>

<p>The heap is the other dynamic memory area, allocated/freed by malloc/free and their variants. Note that while the default global new and delete might be implemented in terms of malloc and free by a particular compiler, the heap is not the same as free store and memory allocated in one area cannot be safely deallocated in the other. Memory allocated from the heap can be used for objects of class type by placement-new construction and explicit destruction.  If so used, the notes about free store object lifetime apply similarly here.</p>

<h3>Global/Static</h3>

<p>Global or static variables and objects have their storage allocated at program startup, but may not be initialized until after the program has begun executing.  For instance, a static variable in a function is initialized only the first time program execution passes through its definition.  The order of initialization of global variables across translation units is not defined, and special care is needed to manage dependencies between global objects (including class statics).  As always, uninitialized proto- objects' storage may be accessed and manipulated through a void* but no nonstatic members or member functions may be used or referenced outside the object&rsquo;s actual lifetime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Handling]]></title>
    <link href="http://hiperc.com/exception-handling/"/>
    <updated>2013-09-29T02:31:00+08:00</updated>
    <id>http://hiperc.com/exception-handling</id>
    <content type="html"><![CDATA[<p><strong>Throw</strong> first it creates an object that isn’t there under normal program execution, and of course the constructor is called for that object. Then the object is, in effect, “returned” from the function, even though that object type isn’t normally what the function is designed to return. A simplistic way to think about exception handling is as an alternate return mechanism, although you get into trouble if you take the analogy too far – you can also exit from ordinary scopes by throwing an exception.</p>

<!-- more -->


<p>The function <strong>unexpected( )</strong> is called when you throw something other than what appears in the exception specification. <strong>set_unexpected( )</strong> is implemented with a pointer to a function, so you can change its behaviour.</p>

<p>If an exception is uncaught, the special function <strong>terminate( )</strong> is automatically called. You can install your own terminate( ) function using the standard <strong>set_terminate( )</strong> function, which returns a pointer to the terminate( ) function you are replacing, so you can restore it later if you want.</p>

<ul>
<li>exception: The base class for all the exceptions thrown by the  ++ standard library. You can ask what( ) and get a result that can be displayed as a character representation.</li>
<li>logic_error: Derived from exception. Reports program logic errors, which could presumably be detected before the program executes.</li>
<li>runtime_error: Derived from exception. Reports runtime errors, which can presumably be detected only when the program executes.</li>
</ul>


<h3>logic_error</h3>

<ul>
<li>domain_error: Reports violations of a precondition.</li>
<li>invalid_argument Indicates an invalid argument to the function it’s thrown from.</li>
<li>length_error: Indicates an attempt to produce an object whose length is greater than or equal to NPOS (the largest representable value of type size_t)</li>
<li>out_of_range: Reports an out-of-range argument.</li>
<li>bad_cast: Thrown for executing an invalid dynamic_cast expression in run-time type identification.</li>
<li>bad_typeid: Reports a null pointer p in an expression typeid(*p). (Again, a run-time type).</li>
</ul>


<h3>runtime_error</h3>

<ul>
<li>range_error: Reports violation of a postcondition.</li>
<li>overflow_error: Reports an arithmetic overflow.</li>
<li>bad_alloc: Reports a failure to allocate storage.</li>
</ul>


<h3>Catch by reference not by value</h3>

<p><script src='https://gist.github.com/6745383.js?file='></script><noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://gist.github.com/liteobj/6745383/raw/&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></p>

<p><code>
https://gist.github.com/6745383.git
</code></p>
]]></content>
  </entry>
  
</feed>
