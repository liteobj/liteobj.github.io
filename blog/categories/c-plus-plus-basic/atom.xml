<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ Basic | HiPerC]]></title>
  <link href="http://hiperc.com/blog/categories/c-plus-plus-basic/atom.xml" rel="self"/>
  <link href="http://hiperc.com/"/>
  <updated>2013-10-02T14:06:47+08:00</updated>
  <id>http://hiperc.com/</id>
  <author>
    <name><![CDATA[HiperC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Casting in C++]]></title>
    <link href="http://hiperc.com/casting-in-c-plus-plus/"/>
    <updated>2013-09-28T23:44:00+08:00</updated>
    <id>http://hiperc.com/casting-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Generally creating a specific object (Circle, Square, or Triangle), take its address and cast it to a Shape* (forgetting the specific type of the object), and use that anonymous
pointer in the rest of the program. Act of casting from a more derived type to a base type is called <strong>upcasting</strong>.</p>

<!-- more -->


<ul>
<li><p><strong>static_cast</strong>: For “well-behaved” and “reasonably well behaved”casts, including things you might now do without a cast (e.g., an upcast or automatic type conversion).</p></li>
<li><p><strong>const_cast</strong>: To cast away const and/or volatile.</p></li>
<li><p><strong>dynamic_cast</strong>: For type-safe <strong>downcasting</strong>. If casting a Circle<em> to a Shape</em> is an upcast, then casting a Shape<em> to a Circle</em> is a downcast. However, you know a Circle<em> is also a Shape</em>,and the compiler freely allows an upcast assignment, but you don’t know that a Shape<em> is necessarily a Circle</em>, so the compiler doesn’t allow you to perform a downcast assignment without using an explicit cast.</p></li>
<li><p><strong>reinterpret_cast</strong> To cast to a completely different meaning. The key is that you’ll need to cast back to the original type to use it safely. The type you cast to is typically used only for bit twiddling or some other mysterious purpose. This is the most dangerous of all the casts.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Classes]]></title>
    <link href="http://hiperc.com/c-plus-plus-classes/"/>
    <updated>2013-09-13T07:17:00+08:00</updated>
    <id>http://hiperc.com/c-plus-plus-classes</id>
    <content type="html"><![CDATA[<p>Structure defaults to public while class defaults to private. Union can not be a base class as memory of the member variables are overlayed.</p>

<p>Upcasting is a way of taking an address of the object and treating it as the base class.</p>

<!-- more -->


<p>VTable holds the list of virtual functions. The size of the class A with one or more virtual function is equal to size(A) + size of void pointer. VPTR is created during the initialisation of the class hence default constructor comes into act.
typeid is used for down casting, by overcoming the behaviour of dynamic casting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Constructor and Destructor]]></title>
    <link href="http://hiperc.com/c-plus-plus-constructor-and-destructor/"/>
    <updated>2013-09-13T07:16:00+08:00</updated>
    <id>http://hiperc.com/c-plus-plus-constructor-and-destructor</id>
    <content type="html"><![CDATA[<p>Object’s lifetime begins only after the constructor completes successfully.</p>

<p>it’s not good to throw exceptions from within the destructor. During stack unwinding there might exist another exception which is still active.</p>

<!-- more -->


<p>Default constructor is called with no arguments. If a virtual function is called within the constructor, the local version of the function is called. And also virtual keyword does not make any sense in contractor but in destructor it is very important to use it to avoid memory leak. Pure virtual destructors will not allow creation of the abstract base class.</p>

<p>Default Copy constructor copies the object bit by bit. If the object contains pointers, both the objects will point to the same memory buffer.</p>
]]></content>
  </entry>
  
</feed>
