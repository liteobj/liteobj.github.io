<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Advance | HiPerC]]></title>
  <link href="http://hiperc.com/blog/categories/advance/atom.xml" rel="self"/>
  <link href="http://hiperc.com/"/>
  <updated>2013-10-28T23:07:50+08:00</updated>
  <id>http://hiperc.com/</id>
  <author>
    <name><![CDATA[HiperC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spin Lock]]></title>
    <link href="http://hiperc.com/spin-lock/"/>
    <updated>2013-10-28T22:50:00+08:00</updated>
    <id>http://hiperc.com/spin-lock</id>
    <content type="html"><![CDATA[<p>A <strong>semaphore</strong> will nowadays typically wrap <code>sys_futex</code> under Linux (optionally with a spinlock that exits after a few attempts). A <strong>mutex</strong>, in its most fundamental form, is just an integer in memory. This memory can have a few different values depending on the that state of the mutex. Mutex uses <code>test-and-set</code> mechanism that provides no support for a thread to wait on the value. A <strong>spinlock</strong> is typically implemented using atomic operations, and without using anything provided by the operating system.</p>

<!-- more -->


<p>In GCC the spinlock can be written in the following way.
``` c++ Spin lock
void spin_lock(int *p)
{</p>

<pre><code>while(!__sync_bool_compare_and_swap(p, 0, 1));
</code></pre>

<p>}</p>

<p>void spin_unlock(int volatile *p)
{</p>

<pre><code>asm volatile (""); // acts as a memory barrier.
*p = 0;
</code></pre>

<p>}<br/>
<code>
Further optimisation to the above code results in
</code> c++ Spin lock optimised
void spin_lock(int volatile *p)
{</p>

<pre><code>while(!__sync_bool_compare_and_swap(p, 0, 1))
{
    while(*p) _mm_pause();
}
</code></pre>

<p>}
<code>``
Here the</code>pause<code>instruction is vital for performance on HyperThreading CPUs when you've got code that spins like this -- it lets the second thread execute while the first thread is spinning. On CPUs which don't support</code>pause<code>, it is treated as a</code>nop`.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PROCESSES THREADS AND PTHREADS]]></title>
    <link href="http://hiperc.com/processes-threads-and-pthreads/"/>
    <updated>2013-10-10T23:49:00+08:00</updated>
    <id>http://hiperc.com/processes-threads-and-pthreads</id>
    <content type="html"><![CDATA[<p>Coming Soon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart Pointers: auto_ptr vs unique_ptr vs shared_ptr]]></title>
    <link href="http://hiperc.com/smart-pointers-auto-ptr-vs-unique-ptr-vs-shared-ptr/"/>
    <updated>2013-09-13T07:13:00+08:00</updated>
    <id>http://hiperc.com/smart-pointers-auto-ptr-vs-unique-ptr-vs-shared-ptr</id>
    <content type="html"><![CDATA[<p><strong>auto_ptr</strong> is a class template which can store pointer to object and ensures that the object is destroyed when the control goes out of scope. auto_ptr can be copied where as unique_ptr can be moved using std::move().
After copy operation is complete the old auto_ptr gets releases (destroyed).</p>

<!-- more -->


<p></p>

<p>The <strong>unique_ptr</strong> can also handle array. There can not be two auto_ptr managing a single objects, of this purpose there is shared_ptr.</p>

<p><strong>shared_ptr</strong> objects release ownership on the object they co-own as soon as they themselves are destroyed, or as soon as their value changes either by an assignment operation or by an explicit call to shared_ptr::reset. Once all shared_ptr objects that share ownership over a pointer have released this ownership, the managed object is deleted (normally by calling ::delete, but a different deleter may be specified on construction).</p>

<p>shared_ptr objects can only share ownership by copying their value: If two shared_ptr are constructed (or made) from the same (non-shared_ptr) pointer, they will both be owning the pointer without sharing it, causing potential access problems when one of them releases it (deleting its managed object) and leaving the other pointing to an invalid location.</p>
]]></content>
  </entry>
  
</feed>
